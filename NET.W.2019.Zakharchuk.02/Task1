using System;
using System.Collections.Generic;

namespace Task1
{
    public class Task_1
    {
        /// <summary>
        /// This method convert to decimal number to binary number system
        /// </summary>
        /// <param name="number">Number which mast be convert to binary number system</param>        
        /// <returns>Collection of the bits</returns>
        static List<int> GetBinarySys(int number)
        {
            int temp;
            List<int> numberBinSys = new List<int>();
            while (number > 0)
            {
                temp = number % 2;
                number /= 2;
                numberBinSys.Add(temp);
            }
            return numberBinSys;
        }

        /// <summary>
        /// This method adds the bits(0) to the end of collection bits, which must be less than j
        /// </summary>
        /// <param name="list">Collection of the bits the first or the second numbers</param>        
        /// <param name="j">index of bit of the second signed four byte integer</param>        
        static void AddCountOfList(ref List<int> list, int j)
        {
            int k = list.Count;
            while (k <= j)
            {
                list.Add(0);
                k++;
            }
        }
        /// <summary>
        /// This method insert bits from the
        /// j-th to the i-th of one number into another number so that bits of the second number
        /// take place from bit j till bit i, and after retuns number(bits are numbered from right to left).
        /// </summary>
        /// <param name="numberSource">The first signed four byte integer</param>
        /// <param name="numberIn">The second signed four byte integer</param>
        /// <param name="i">index of bit of the first signed four byte integer</param>
        /// <param name="j">index of bit of the second signed four byte integer</param>
        /// <returns>number which  is result of inserting first number in the second number</returns>
        static int InsertNumber(int numberSource, int numberIn, int i, int j)
        {
            if (j > 31) j = 31;
            if (numberIn == numberSource && i == j) return numberSource;
            List<int> numberInBinSys, numberSourceBinSys, numberEndBinSys;

            numberSourceBinSys = GetBinarySys(numberSource);
            numberInBinSys = GetBinarySys(numberIn);

            if (j > numberSourceBinSys.Count) AddCountOfList(ref numberSourceBinSys, j);
            if (j > numberInBinSys.Count) AddCountOfList(ref numberInBinSys, j);

            numberEndBinSys = numberSourceBinSys;
            if (i == j) numberEndBinSys[i] = numberInBinSys[j];
            for (int k = 0; k < j - i; k++) numberEndBinSys[++i] = numberInBinSys[k];

            numberEndBinSys.Reverse(0, numberEndBinSys.Count);
            return Convert.ToInt32(String.Join("", numberEndBinSys), 2);
        }
    }
}
